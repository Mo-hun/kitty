module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateUser {
  count: Int!
}

type AggregateWorktime_day {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createWorktime_day(data: Worktime_dayCreateInput!): Worktime_day!
  updateWorktime_day(data: Worktime_dayUpdateInput!, where: Worktime_dayWhereUniqueInput!): Worktime_day
  updateManyWorktime_days(data: Worktime_dayUpdateManyMutationInput!, where: Worktime_dayWhereInput): BatchPayload!
  upsertWorktime_day(where: Worktime_dayWhereUniqueInput!, create: Worktime_dayCreateInput!, update: Worktime_dayUpdateInput!): Worktime_day!
  deleteWorktime_day(where: Worktime_dayWhereUniqueInput!): Worktime_day
  deleteManyWorktime_days(where: Worktime_dayWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  worktimeDay(where: Worktime_dayWhereUniqueInput!): Worktime_day
  worktimeDays(where: Worktime_dayWhereInput, orderBy: Worktime_dayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Worktime_day]!
  worktimeDaysConnection(where: Worktime_dayWhereInput, orderBy: Worktime_dayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): Worktime_dayConnection!
  node(id: ID!): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  worktimeDay(where: Worktime_daySubscriptionWhereInput): Worktime_daySubscriptionPayload
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}

type Worktime_day {
  id: ID!
  date: String!
  name: String!
  attend: String
  leave: String
}

type Worktime_dayConnection {
  pageInfo: PageInfo!
  edges: [Worktime_dayEdge]!
  aggregate: AggregateWorktime_day!
}

input Worktime_dayCreateInput {
  id: ID
  date: String!
  name: String!
  attend: String
  leave: String
}

type Worktime_dayEdge {
  node: Worktime_day!
  cursor: String!
}

enum Worktime_dayOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  name_ASC
  name_DESC
  attend_ASC
  attend_DESC
  leave_ASC
  leave_DESC
}

type Worktime_dayPreviousValues {
  id: ID!
  date: String!
  name: String!
  attend: String
  leave: String
}

type Worktime_daySubscriptionPayload {
  mutation: MutationType!
  node: Worktime_day
  updatedFields: [String!]
  previousValues: Worktime_dayPreviousValues
}

input Worktime_daySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: Worktime_dayWhereInput
  AND: [Worktime_daySubscriptionWhereInput!]
  OR: [Worktime_daySubscriptionWhereInput!]
  NOT: [Worktime_daySubscriptionWhereInput!]
}

input Worktime_dayUpdateInput {
  date: String
  name: String
  attend: String
  leave: String
}

input Worktime_dayUpdateManyMutationInput {
  date: String
  name: String
  attend: String
  leave: String
}

input Worktime_dayWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: String
  date_not: String
  date_in: [String!]
  date_not_in: [String!]
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_contains: String
  date_not_contains: String
  date_starts_with: String
  date_not_starts_with: String
  date_ends_with: String
  date_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  attend: String
  attend_not: String
  attend_in: [String!]
  attend_not_in: [String!]
  attend_lt: String
  attend_lte: String
  attend_gt: String
  attend_gte: String
  attend_contains: String
  attend_not_contains: String
  attend_starts_with: String
  attend_not_starts_with: String
  attend_ends_with: String
  attend_not_ends_with: String
  leave: String
  leave_not: String
  leave_in: [String!]
  leave_not_in: [String!]
  leave_lt: String
  leave_lte: String
  leave_gt: String
  leave_gte: String
  leave_contains: String
  leave_not_contains: String
  leave_starts_with: String
  leave_not_starts_with: String
  leave_ends_with: String
  leave_not_ends_with: String
  AND: [Worktime_dayWhereInput!]
  OR: [Worktime_dayWhereInput!]
  NOT: [Worktime_dayWhereInput!]
}

input Worktime_dayWhereUniqueInput {
  id: ID
}
`
      }
    